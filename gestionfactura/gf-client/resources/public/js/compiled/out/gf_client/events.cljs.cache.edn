;; Analyzed by ClojureScript 1.7.107
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name gf-client.events, :imports nil, :requires {string clojure.string, clojure.string clojure.string, async cljs.core.async, cljs.core.async cljs.core.async, utils gf-client.utils, gf-client.utils gf-client.utils}, :uses nil, :defs {*event-que* {:name gf-client.events/*event-que*, :file "src\\gf-client\\events.cljs", :line 10, :column 1, :end-line 10, :end-column 27, :dynamic true, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\events.cljs", :line 10, :column 16, :end-line 10, :end-column 27, :dynamic true}}, *chan-data* {:name gf-client.events/*chan-data*, :file "src\\gf-client\\events.cljs", :line 11, :column 1, :end-line 11, :end-column 27, :dynamic true, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\events.cljs", :line 11, :column 16, :end-line 11, :end-column 27, :dynamic true}}, AppEvent {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name gf-client.events/AppEvent, :file "src\\gf-client\\events.cljs", :end-column 20, :type true, :column 12, :internal-ctor true, :line 21, :record true, :end-line 21, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->AppEvent {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\events.cljs", :line 21, :column 12, :end-line 21, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([event-type event-src event-data]))}, :name gf-client.events/->AppEvent, :variadic false, :file "src\\gf-client\\events.cljs", :end-column 20, :method-params ([event-type event-src event-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 21, :end-line 21, :max-fixed-arity 3, :fn-var true, :arglists (quote ([event-type event-src event-data]))}, map->AppEvent {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\events.cljs", :line 21, :column 12, :end-line 21, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__24686]))}, :name gf-client.events/map->AppEvent, :variadic false, :file "src\\gf-client\\events.cljs", :end-column 20, :method-params ([G__24686]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24686]))}, initialize-event-que {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\events.cljs", :line 22, :column 7, :end-line 22, :end-column 27, :arglists (quote ([])), :doc "creates and returns event que (flux) for application"}, :name gf-client.events/initialize-event-que, :variadic false, :file "src\\gf-client\\events.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "creates and returns event que (flux) for application"}, get-event-que {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\events.cljs", :line 31, :column 7, :end-line 31, :end-column 20, :arglists (quote ([]))}, :name gf-client.events/get-event-que, :variadic false, :file "src\\gf-client\\events.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, post-event {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\events.cljs", :line 35, :column 7, :end-line 35, :end-column 17, :arglists (quote ([e])), :doc "posts an event to the event que"}, :name gf-client.events/post-event, :variadic false, :file "src\\gf-client\\events.cljs", :end-column 17, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e])), :doc "posts an event to the event que"}, go-logger {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\events.cljs", :line 41, :column 7, :end-line 41, :end-column 16, :arglists (quote ([])), :doc "go block that logs all events in the que"}, :name gf-client.events/go-logger, :variadic false, :file "src\\gf-client\\events.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "go block that logs all events in the que"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{event-type :else :prov-ui-task :update-ui-task :recur :event-src :event-data event-src :new-ui-task event-data :event-type}, :order [:event-type :event-src :event-data event-type event-src event-data :recur :else :new-ui-task :prov-ui-task :update-ui-task]}, :doc "event functions to setup up event que and helper functions to subscribe to and add to event queue"}