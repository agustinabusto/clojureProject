;; Analyzed by ClojureScript 1.7.107
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name gf-client.taskservice, :imports nil, :requires {string clojure.string, clojure.string clojure.string, async cljs.core.async, cljs.core.async cljs.core.async, ev gf-client.events, gf-client.events gf-client.events, utils gf-client.utils, gf-client.utils gf-client.utils}, :uses nil, :defs {get-min-index {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 13, :column 7, :end-line 13, :end-column 20, :arglists (quote ([state])), :doc "returns min index in taskque for given state, -1 if state not found"}, :name gf-client.taskservice/get-min-index, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "returns min index in taskque for given state, -1 if state not found"}, go-update-tasks {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 110, :column 7, :end-line 110, :end-column 22, :arglists (quote ([])), :doc "event handler for update task events"}, :name gf-client.taskservice/go-update-tasks, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "event handler for update task events"}, new-task {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 53, :column 7, :end-line 53, :end-column 15, :arglists (quote ([task])), :doc "adds the task to the taskque"}, :name gf-client.taskservice/new-task, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 15, :method-params ([task]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([task])), :doc "adds the task to the taskque"}, taskque {:name gf-client.taskservice/taskque, :file "src\\gf-client\\taskservice.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 9, :column 10, :end-line 9, :end-column 17}}, taskque-prov {:name gf-client.taskservice/taskque-prov, :file "src\\gf-client\\taskservice.cljs", :line 10, :column 1, :end-line 10, :end-column 22, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 10, :column 10, :end-line 10, :end-column 22}}, taskque-sol {:name gf-client.taskservice/taskque-sol, :file "src\\gf-client\\taskservice.cljs", :line 11, :column 1, :end-line 11, :end-column 21, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 11, :column 10, :end-line 11, :end-column 21}}, find-all-task {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 46, :column 7, :end-line 46, :end-column 20, :arglists (quote ([])), :doc "retorna los datos del proveedor"}, :name gf-client.taskservice/find-all-task, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "retorna los datos del proveedor"}, initialize-task-service {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 123, :column 7, :end-line 123, :end-column 30, :arglists (quote ([])), :doc "initializes task service by starting all event handlers"}, :name gf-client.taskservice/initialize-task-service, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "initializes task service by starting all event handlers"}, complete-task {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 70, :column 7, :end-line 70, :end-column 20, :arglists (quote ([])), :doc "completes next task in que"}, :name gf-client.taskservice/complete-task, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "completes next task in que"}, purge-task-que {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 78, :column 7, :end-line 78, :end-column 21, :arglists (quote ([])), :doc "empties all tasks in queue"}, :name gf-client.taskservice/purge-task-que, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "empties all tasks in queue"}, reset-task-queue {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 83, :column 7, :end-line 83, :end-column 23, :arglists (quote ([])), :doc "resets tasks in que with random tasks"}, :name gf-client.taskservice/reset-task-queue, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "resets tasks in que with random tasks"}, go-new-tasks {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 89, :column 7, :end-line 89, :end-column 19, :arglists (quote ([])), :doc "event handler for new task events"}, :name gf-client.taskservice/go-new-tasks, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "event handler for new task events"}, go-new-tasks-prov {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 100, :column 7, :end-line 100, :end-column 24, :arglists (quote ([])), :doc "event handler for new task events for login (AJB)"}, :name gf-client.taskservice/go-new-tasks-prov, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "event handler for new task events for login (AJB)"}, find-proveedor {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 28, :column 7, :end-line 28, :end-column 21, :arglists (quote ([])), :doc "returns all tasks in queue"}, :name gf-client.taskservice/find-proveedor, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "returns all tasks in queue"}, schedule-task {:protocol-inline nil, :meta {:file "C:\\Users\\JuliaABusto\\IdeaProjects\\gestionfactura\\gf-client\\src\\gf-client\\taskservice.cljs", :line 62, :column 7, :end-line 62, :end-column 20, :arglists (quote ([])), :doc "schedules next task in que"}, :name gf-client.taskservice/schedule-task, :variadic false, :file "src\\gf-client\\taskservice.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "schedules next task in que"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:service :schedule :else :new :completed :service-task-update :prov-ui-task :update-ui-task :recur :state :id :event-data :scheduled :new-ui-task :complete :event-type}, :order [:state :event-type :id :new :service-task-update :service :scheduled :completed :new-ui-task :recur :event-data :else :prov-ui-task :update-ui-task :schedule :complete]}, :doc "task service and service functions"}